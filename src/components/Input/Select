import { twMerge } from 'tailwind-merge'
import { inputLabelClassName } from '.'
import { type SelectInputProps } from 'components/Input/types'
import { forwardRef, type ReactNode, type Ref } from 'react'

function Select<TOption> (props: SelectInputProps<TOption>, ref: Ref<any>): ReactNode {
  const { className, label, id, name, options, errorMessage, ...rest } = props

  return (
    <div className={twMerge('flex flex-col', className)}>
      {label && (
        <label className={inputLabelClassName} htmlFor={id || name}>
          {label}
        </label>
      )}

      <ReactSelect
        {...rest}
        id={id || name}
        name={name}
        ref={ref}
        options={options}
        classNames={{
          control: () => {
            return twMerge(selectClassName, errorMessage && selectErrorClassName)
          },
          option: (props: OptionProps) => {
            return twMerge('!text-xs', props.isSelected && '!bg-primary-500', !props.isSelected && props.isFocused && '!bg-primary-100')
          }
        }}
      />

      {errorMessage && (
        <p className="mt-1 text-sm text-red-600">{errorMessage}</p>
      )}
    </div>
  )
}

const ForwardedSelect = forwardRef(Select)

export default ForwardedSelect
